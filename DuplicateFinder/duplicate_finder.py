import os
import hashlib
import tkinter as tk
from tkinter import ttk, messagebox, filedialog, Menu
from threading import Thread, Event
import time
import re
import subprocess
import random
import logging
from send2trash import send2trash

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(filename='duplicate_finder.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

class DuplicateFinder:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üîÆ DuplicateFinder")
        self.root.geometry("1200x700")
        self.root.minsize(1000, 600)
        self.theme = 0
        self.protected_paths = [
            'Windows', 'Program Files', 'Program Files (x86)',
            'System Volume Information', '$RECYCLE.BIN'
        ]
        self.protected_exts = ['.dll', '.sys', 'pagefile.sys']
        self.duplicates_data = []
        self.filtered_data = []
        self.sort_column = None
        self.sort_reverse = False
        self.pause_event = Event()
        self.pause_event.set()
        self.scan_in_progress = False
        self._prev_theme = 0
        self.active_filters = set()
        self.cat_color = "#0000ff"
        self.cat_animation = None
        self.dynamic_file_types = set()
        self.keep_count = 0
        self.title_label = None
        self.donate_btn = None
        self.cat_label = None
        self.status = None
        self.scan_btn = None
        self.folder_btn = None
        self.progress = None
        self.pause_btn = None
        self.pause_check = None
        self.preview_btn = None
        self.stats_btn = None
        self.mass_delete_btn = None
        self.filter_photo = None
        self.filter_music = None
        self.filter_docs = None
        self.filter_video = None
        self.filter_folder = None
        self.clear_filter = None
        self.filter_dynamic = None
        self.tree = None
        self.path_var = None
        self.reset_keep_btn = None
        self.show_initial_warning()

    def show_initial_warning(self):
        if messagebox.askokcancel("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í–∞—à –ü–ö –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á—É—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏–∑-–∑–∞ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –¥–∏—Å–∫. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"):
            self.setup_ui()
        else:
            self.root.destroy()

    def setup_ui(self):
        menubar = Menu(self.root, bg='#1C2526', fg='#5D7A8C', relief='flat', bd=0)
        theme_menu = Menu(menubar, tearoff=0, bg='#1C2526', fg='#5D7A8C', relief='flat', bd=0)
        theme_menu.add_command(label="–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞", command=lambda: self.switch_theme(0))
        theme_menu.add_command(label="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞", command=lambda: self.switch_theme(1))
        theme_menu.add_command(label="–†–æ–∑–æ–≤–∞—è —Ç–µ–º–∞", command=lambda: self.switch_theme(2))
        menubar.add_cascade(label="üåû –¢–µ–º–∞", menu=theme_menu)
        self.root.config(menu=menubar)

        header_frame = tk.Frame(self.root, bg=self.root.cget('bg'), height=80, bd=0, highlightthickness=0)
        header_frame.pack(fill='x', padx=20, pady=10)
        header_frame.pack_propagate(False)
        title_frame = tk.Frame(header_frame, bg=self.root.cget('bg'), bd=0, highlightthickness=0)
        title_frame.pack(side=tk.LEFT)
        self.title_label = tk.Label(title_frame, text="üîÆ DuplicateFinder",
                                  font=('Segoe UI', 28, 'bold'), bg=self.root.cget('bg'))
        self.title_label.pack(side=tk.LEFT)
        self.donate_btn = tk.Button(title_frame, text="üíñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
                                  command=self.show_donate_menu, font=('Segoe UI', 12), width=12, relief='flat', bd=0, highlightthickness=0)
        self.donate_btn.pack(side=tk.LEFT, padx=10)
        self.cat_label = tk.Label(title_frame, text="", font=('Segoe UI', 28), bg=self.root.cget('bg'))
        self.cat_label.pack(side=tk.LEFT)
        self.cat_label.bind("<Button-1>", self.start_cat_animation)

        control_frame = tk.Frame(self.root, bg=self.root.cget('bg'), relief='flat', bd=0, highlightthickness=0)
        control_frame.pack(fill='x', padx=20, pady=10)
        btn_frame = tk.Frame(control_frame, bg=self.root.cget('bg'), bd=0, highlightthickness=0)
        btn_frame.pack(pady=15)
        self.scan_btn = tk.Button(btn_frame, text="üöÄ –°–ö–ê–ù–ò–†–û–í–ê–¢–¨ –î–ò–°–ö",
                                 command=self.start_scan, font=('Segoe UI', 14, 'bold'), width=20, height=2, relief='flat', bd=0, highlightthickness=0)
        self.scan_btn.pack(side=tk.LEFT, padx=10, pady=5)
        self.folder_btn = tk.Button(btn_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
                                   command=self.choose_folder, font=('Segoe UI', 12), width=15, relief='flat', bd=0, highlightthickness=0)
        self.folder_btn.pack(side=tk.LEFT, padx=10, pady=5)
        self.path_var = tk.StringVar(value="C:\\")
        path_entry = tk.Entry(control_frame, textvariable=self.path_var, width=70, font=('Segoe UI', 11), relief='flat', bd=0, highlightthickness=0)
        path_entry.pack(pady=10)

        progress_frame = tk.Frame(control_frame, bg=self.root.cget('bg'), bd=0, highlightthickness=0)
        progress_frame.pack(pady=10, fill='x')
        self.progress = ttk.Progressbar(progress_frame, length=800, mode='determinate', style='TProgressbar')
        self.progress.pack(fill='x', expand=True)
        self.pause_btn = tk.Button(progress_frame, text="‚è∏Ô∏è –ü–ê–£–ó–ê",
                                 command=self.toggle_pause, font=('Segoe UI', 12), width=10, relief='flat', bd=0, highlightthickness=0)
        self.pause_btn.pack(pady=5, side=tk.RIGHT)
        self.pause_check = tk.Label(progress_frame, text="", font=('Segoe UI', 12), bg=self.root.cget('bg'))
        self.pause_check.pack(pady=5, side=tk.RIGHT, padx=5)
        self.status = tk.Label(progress_frame, text="üõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ê | –ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
                              font=('Segoe UI', 11), bg=self.root.cget('bg'))
        self.status.pack(pady=5, fill='x')

        action_frame = tk.Frame(self.root, bg=self.root.cget('bg'), relief='flat', bd=0, highlightthickness=0)
        action_frame.pack(fill='x', padx=20, pady=10)
        self.preview_btn = tk.Button(action_frame, text="üëÅÔ∏è –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê",
                                   command=self.preview_deletion, font=('Segoe UI', 12, 'bold'), width=25, relief='flat', bd=0, highlightthickness=0)
        self.preview_btn.pack(side=tk.LEFT, padx=10, pady=5)
        self.stats_btn = tk.Button(action_frame, text="üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
                                  command=self.show_detailed_stats, font=('Segoe UI', 12), width=15, relief='flat', bd=0, highlightthickness=0)
        self.stats_btn.pack(side=tk.LEFT, padx=10, pady=5)
        self.mass_delete_btn = tk.Button(action_frame, text="üîí –£–î–ê–õ–ò–¢–¨ (3 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
                                       command=self.final_delete, font=('Segoe UI', 12, 'bold'), width=25, relief='flat', bd=0, highlightthickness=0)
        self.mass_delete_btn.pack(side=tk.LEFT, padx=10, pady=5)

        filter_frame = tk.LabelFrame(action_frame, text="üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ô –§–ò–õ–¨–¢–† - –ß–¢–û –û–°–¢–ê–í–ò–¢–¨",
                                   font=('Segoe UI', 12, 'bold'), bg=self.root.cget('bg'), fg='#5D7A8C',
                                   relief='flat', bd=0, highlightthickness=0, padx=10, pady=5)
        filter_frame.pack(pady=10, fill='x', padx=20)
        filter_btn_frame = tk.Frame(filter_frame, bg=self.root.cget('bg'), bd=0, highlightthickness=0)
        filter_btn_frame.pack(pady=5)
        self.filter_photo = tk.Button(filter_btn_frame, text="üñºÔ∏è –§–û–¢–û",
                                     command=lambda: self.toggle_filter('photo'), width=9, relief='flat', bd=0, highlightthickness=0)
        self.filter_photo.pack(side=tk.LEFT, padx=3, pady=3)
        self.filter_music = tk.Button(filter_btn_frame, text="üéµ –ú–£–ó–´–ö–ê",
                                     command=lambda: self.toggle_filter('music'), width=9, relief='flat', bd=0, highlightthickness=0)
        self.filter_music.pack(side=tk.LEFT, padx=3, pady=3)
        self.filter_docs = tk.Button(filter_btn_frame, text="üìÑ –î–û–ö–£–ú–ï–ù–¢–´",
                                    command=lambda: self.toggle_filter('docs'), width=10, relief='flat', bd=0, highlightthickness=0)
        self.filter_docs.pack(side=tk.LEFT, padx=3, pady=3)
        self.filter_video = tk.Button(filter_btn_frame, text="üé• –í–ò–î–ï–û",
                                     command=lambda: self.toggle_filter('video'), width=9, relief='flat', bd=0, highlightthickness=0)
        self.filter_video.pack(side=tk.LEFT, padx=3, pady=3)
        self.filter_folder = tk.Button(filter_btn_frame, text="üìÅ –ü–ê–ü–ö–ê",
                                      command=self.filter_by_folder, width=9, relief='flat', bd=0, highlightthickness=0)
        self.filter_folder.pack(side=tk.LEFT, padx=3, pady=3)
        self.filter_dynamic = tk.Button(filter_btn_frame, text="‚≠ê –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ",
                                      command=self.show_dynamic_filter, width=11, relief='flat', bd=0, highlightthickness=0)
        self.filter_dynamic.pack(side=tk.LEFT, padx=3, pady=3)
        self.clear_filter = tk.Button(filter_btn_frame, text="üßπ –û–ß–ò–°–¢–ò–¢–¨",
                                     command=self.clear_filters, width=9, relief='flat', bd=0, highlightthickness=0)
        self.clear_filter.pack(side=tk.LEFT, padx=3, pady=3)

        columns = ("‚Ññ", "–û—Å—Ç–∞–≤–∏—Ç—å ‚úì", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "–†–∞–∑–º–µ—Ä", "–ü—É—Ç—å", "–¢–∏–ø", "–•—ç—à", "–û—Ç–∫—Ä—ã—Ç—å")
        self.tree = ttk.Treeview(self.root, columns=columns, show="headings", height=25, style='Treeview')
        for col in columns:
            self.tree.heading(col, text=col, command=lambda c=col: self.sort_by_column(c))
            self.tree.column(col, width=150 if col == "–û—Å—Ç–∞–≤–∏—Ç—å ‚úì" else 140 if col != "–û—Ç–∫—Ä—ã—Ç—å" else 80)
        scrollbar = ttk.Scrollbar(self.root, orient="vertical", command=self.tree.yview, style='Vertical.TScrollbar')
        self.tree.configure(yscrollcommand=scrollbar.set)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=20, pady=10)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y, pady=10)
        self.tree.bind("<Double-1>", self.open_file)
        self.tree.bind("<Button-1>", self.toggle_keep)

        reset_frame = tk.Frame(self.root, bg=self.root.cget('bg'), bd=0, highlightthickness=0)
        reset_frame.pack(pady=5)
        self.reset_keep_btn = tk.Button(reset_frame, text="üßπ –°–±—Ä–æ—Å–∏—Ç—å –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ",
                                      command=self.reset_keep, font=('Segoe UI', 12), width=15, relief='flat', bd=0, highlightthickness=0)
        self.reset_keep_btn.pack(side=tk.LEFT, padx=20)

        self.update_styles()

    def update_styles(self):
        if self.theme == 0:
            bg_color = '#f5ede1'
            text_color = '#1a1a2e'
            button_bg = bg_color
            progress_trough = '#d9c8b6'
            table_bg = '#e0e0e0'
            table_text = '#000000'
            header_bg = '#d9c8b6'
            check_color = '#32CD32'
        elif self.theme == 1:
            bg_color = '#1C2526'
            text_color = '#5D7A8C'
            button_bg = '#2D3A3E'
            progress_trough = '#2D3A3E'
            table_bg = '#2D3A3E'
            table_text = '#FFFFFF'
            header_bg = '#1C2526'
            check_color = '#32CD32'
        else:
            bg_color = '#ffe6f0'
            text_color = '#1a1a2e'
            button_bg = bg_color
            progress_trough = '#ffd1e0'
            table_bg = '#e0e0e0'
            table_text = '#000000'
            header_bg = bg_color
            check_color = '#32CD32'

        if self.theme != self._prev_theme:
            self.stop_cat_animation()
            self._interpolate_styles(bg_color, text_color, button_bg, progress_trough, table_bg)
            self._prev_theme = self.theme
            if self.theme == 2:
                self.start_cat_animation(None)

        self.root.configure(bg=bg_color)
        style = ttk.Style()
        style.configure('TButton', font=('Segoe UI', 11), padding=10, background=button_bg,
                        foreground=text_color, borderwidth=0, highlightthickness=0)
        style.configure('TLabel', font=('Segoe UI', 12), background=bg_color, foreground=text_color)
        style.configure('Treeview', background=table_bg, foreground=table_text, fieldbackground=table_bg)
        style.configure('Treeview.Heading', background=header_bg, foreground='#000000', font=('Segoe UI', 10, 'bold'))
        style.configure('TProgressbar', background='#5D7A8C', troughcolor=progress_trough)
        style.configure('TLabelFrame', background=bg_color, foreground=text_color, borderwidth=0, highlightthickness=0)
        style.configure('TLabelFrame.Label', background=bg_color, foreground=text_color)
        style.configure('Vertical.TScrollbar', background=bg_color, troughcolor=bg_color, borderwidth=0)

        if self.title_label: self.title_label.config(bg=bg_color, fg=text_color)
        if self.donate_btn: self.donate_btn.config(bg=button_bg, fg=text_color, highlightthickness=0)
        if self.cat_label:
            self.cat_label.config(bg=bg_color, fg=self.cat_color, text="üê±üêæ" if self.theme == 2 else "")
        if self.status: self.status.config(bg=bg_color, fg=text_color)
        if self.scan_btn: self.scan_btn.config(bg=button_bg, fg=text_color)
        if self.folder_btn: self.folder_btn.config(bg=button_bg, fg=text_color)
        if self.progress: self.progress.config(style='TProgressbar')
        if self.pause_btn: self.pause_btn.config(bg=button_bg, fg=text_color)
        if self.pause_check: self.pause_check.config(bg=bg_color, fg=check_color, text="‚úÖ" if not self.scan_in_progress else "")
        if self.preview_btn: self.preview_btn.config(bg=button_bg, fg=text_color)
        if self.stats_btn: self.stats_btn.config(bg=button_bg, fg=text_color)
        if self.mass_delete_btn: self.mass_delete_btn.config(bg=button_bg, fg=text_color)
        if self.filter_photo: self.filter_photo.config(bg=button_bg, fg=text_color)
        if self.filter_music: self.filter_music.config(bg=button_bg, fg=text_color)
        if self.filter_docs: self.filter_docs.config(bg=button_bg, fg=text_color)
        if self.filter_video: self.filter_video.config(bg=button_bg, fg=text_color)
        if self.filter_folder: self.filter_folder.config(bg=button_bg, fg=text_color)
        if self.filter_dynamic: self.filter_dynamic.config(bg=button_bg, fg=text_color)
        if self.clear_filter: self.clear_filter.config(bg=button_bg, fg=text_color)
        if self.reset_keep_btn: self.reset_keep_btn.config(bg=button_bg, fg=text_color)
        if self.tree: self.tree.configure(style='Treeview')

        for widget in self.root.winfo_children():
            if isinstance(widget, tk.Frame):
                widget.config(bg=bg_color, bd=0, highlightthickness=0)
            elif isinstance(widget, tk.Entry):
                widget.config(bg='#2D3A3E' if self.theme == 1 else '#d9c8b6' if self.theme == 0 else '#ffd1e0', fg=text_color, bd=0, highlightthickness=0)
            elif isinstance(widget, tk.LabelFrame):
                widget.config(bg=bg_color, fg=text_color, bd=0, highlightthickness=0)

    def _interpolate_styles(self, bg_color, text_color, button_bg, progress_trough, table_bg):
        current_bg = self.root.cget('bg')
        for _ in range(10):
            r1, g1, b1 = self._hex_to_rgb(current_bg)
            r2, g2, b2 = self._hex_to_rgb(bg_color)
            r = int(r1 + (r2 - r1) / 10)
            g = int(g1 + (g2 - g1) / 10)
            b = int(b1 + (b2 - b1) / 10)
            interp_bg = f'#{r:02x}{g:02x}{b:02x}'
            self.root.configure(bg=interp_bg)
            self.root.update()
            time.sleep(0.01)

    def _hex_to_rgb(self, hex_color):
        hex_color = hex_color.lstrip('#')
        return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

    def switch_theme(self, theme_index):
        if self.scan_in_progress:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        self.theme = theme_index
        self.update_styles()

    def show_donate_menu(self):
        if self.theme == 0:
            bg_color = '#f5ede1'
            text_color = '#1a1a2e'
        elif self.theme == 1:
            bg_color = '#1C2526'
            text_color = '#5D7A8C'
        else:
            bg_color = '#ffe6f0'
            text_color = '#1a1a2e'
        donate_menu = tk.Toplevel(self.root)
        donate_menu.title("üíñ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞")
        donate_menu.geometry("300x150")
        donate_menu.config(bg=bg_color, bd=0, highlightthickness=0)
        donate_menu.transient(self.root)
        donate_menu.grab_set()
        label = tk.Label(donate_menu, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É:\n2200702064664738",
                        font=('Segoe UI', 12), bg=bg_color, fg=text_color, justify='center')
        label.pack(expand=True, pady=20)
        close_btn = tk.Button(donate_menu, text="–ó–∞–∫—Ä—ã—Ç—å", command=donate_menu.destroy,
                             bg='#5D7A8C' if self.theme == 1 else '#ff87b2' if self.theme == 2 else bg_color,
                             fg='#FFFFFF' if self.theme == 1 else 'white' if self.theme == 2 else text_color,
                             font=('Segoe UI', 10), relief='flat', bd=0, highlightthickness=0)
        close_btn.pack(pady=10)

    def is_protected_file(self, filepath):
        path = os.path.dirname(filepath).lower()
        filename = os.path.basename(filepath).lower()
        ext = os.path.splitext(filename)[1].lower()

        for protected in self.protected_paths:
            if protected.lower() in path:
                logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –∑–∞—â–∏—â—ë–Ω–Ω—ã–π –ø—É—Ç—å: {filepath}")
                return True

        if ext in self.protected_exts:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {filepath}")
            return True

        if re.search(r'\$nt\w+\$', path) or 'boot' in path:
            logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ñ–∞–π–ª: {filepath}")
            return True

        return False

    def choose_folder(self):
        if self.scan_in_progress:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        folder = filedialog.askdirectory()
        if folder:
            self.path_var.set(folder)

    def get_file_hash(self, filepath):
        hash_md5 = hashlib.md5()
        try:
            with open(filepath, "rb") as f:
                for chunk in iter(lambda: f.read(4096), b""):
                    hash_md5.update(chunk)
            return hash_md5.hexdigest()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")
            return None

    def start_scan(self):
        if self.scan_in_progress:
            messagebox.showwarning("‚ö†Ô∏è", "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!")
            return
        self.scan_in_progress = True
        self.pause_event.set()
        self.dynamic_file_types.clear()
        self.keep_count = 0
        Thread(target=self.scan_files, daemon=True).start()
        self.folder_btn.config(state="disabled")
        if self.pause_btn: self.pause_btn.config(state="normal")
        if self.pause_check: self.pause_check.config(text="")

    def toggle_pause(self):
        if not self.scan_in_progress:
            return
        if self.pause_event.is_set():
            self.pause_event.clear()
            if self.pause_btn: self.pause_btn.config(text="‚ñ∂Ô∏è –ü–†–û–î–û–õ–ñ–ò–¢–¨")
            if self.status: self.status.config(text="‚è∏Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–∞—É–∑–µ...")
        else:
            self.pause_event.set()
            if self.pause_btn: self.pause_btn.config(text="‚è∏Ô∏è –ü–ê–£–ó–ê")
            if self.status: self.status.config(text="‚ñ∂Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")
            self.root.update()

    def scan_files(self):
        start_time = time.time()
        scan_path = self.path_var.get()
        if self.status: self.status.config(text="üîç –°–∫–∞–Ω–∏—Ä—É—é —Å –ó–ê–©–ò–¢–û–ô —Å–∏—Å—Ç–µ–º—ã...")
        if self.scan_btn: self.scan_btn.config(state="disabled")
        if self.progress: self.progress['value'] = 0
        files = []
        hash_dict = {}
        try:
            for root, dirs, filenames in os.walk(scan_path):
                logging.info(f"–°–∫–∞–Ω–∏—Ä—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {root}")
                if any(protected.lower() in root.lower() for protected in self.protected_paths):
                    logging.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –∑–∞—â–∏—â—ë–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {root}")
                    continue
                for filename in filenames:
                    filepath = os.path.join(root, filename)
                    if self.is_protected_file(filepath):
                        continue
                    try:
                        size = os.path.getsize(filepath)
                        ext = os.path.splitext(filename)[1].lower()
                        self.dynamic_file_types.add(ext)
                        files.append((filepath, size))
                        logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {filepath}")
                    except OSError as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {filepath}: {e}")
                        continue
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {scan_path}: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            self.finalize_scan(start_time)
            return

        if self.progress: self.progress['maximum'] = len(files)
        for i, (filepath, size) in enumerate(files):
            if not self.pause_event.is_set():
                self.pause_event.wait()
            if self.progress: self.progress['value'] = i + 1
            self.root.update()
            file_hash = self.get_file_hash(filepath)
            if file_hash:
                if file_hash not in hash_dict:
                    hash_dict[file_hash] = []
                hash_dict[file_hash].append((filepath, size))
        self.duplicates_data = []
        for file_hash, file_list in hash_dict.items():
            if len(file_list) > 1:
                file_list.sort(key=lambda x: len(os.path.dirname(x[0])))
                keep_file = file_list[0]
                for filepath, size in file_list[1:]:
                    file_type = self.get_file_type(filepath)
                    self.duplicates_data.append({
                        'id': len(self.duplicates_data) + 1,
                        'keep': os.path.basename(keep_file[0]),
                        'delete': os.path.basename(filepath),
                        'size': "{:.1f} KB".format(size/1024),
                        'path': filepath,
                        'hash': file_hash[:8],
                        'type': file_type,
                        'keep_path': keep_file[0],
                        'selected_to_keep': False,
                        'keep_count': 0
                    })
        self.filtered_data = self.duplicates_data.copy()
        self.apply_active_filters()
        self.refresh_table()
        self.finalize_scan(start_time)

    def finalize_scan(self, start_time):
        elapsed = time.time() - start_time
        total_to_delete = len(self.duplicates_data)
        total_space = sum(float(d['size'].split()[0]) for d in self.duplicates_data)
        if self.status: self.status.config(text=f"üõ°Ô∏è –ó–ê–©–ò–©–ï–ù–û: {total_to_delete} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ | {round(total_space)} KB | {round(elapsed,1)}—Å")
        if self.scan_btn: self.scan_btn.config(state="normal")
        if self.pause_btn: self.pause_btn.config(state="disabled")
        self.scan_in_progress = False
        self.folder_btn.config(state="normal")
        messagebox.showinfo("‚úÖ", "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        if self.pause_check: self.pause_check.config(text="‚úÖ")
        logging.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ {total_to_delete} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤, {round(total_space)} KB, –≤—Ä–µ–º—è: {round(elapsed,1)}—Å")

    def get_file_type(self, filepath):
        ext = os.path.splitext(filepath)[1].lower()
        photo_exts = ['.jpg', '.jpeg', '.png', '.gif', '.bmp']
        music_exts = ['.mp3', '.wav', '.flac', '.m4a']
        doc_exts = ['.pdf', '.doc', '.docx', '.txt']
        video_exts = ['.mp4', '.avi', '.mkv', '.mov']
        if ext in photo_exts: return 'üñºÔ∏è –§–æ—Ç–æ'
        if ext in music_exts: return 'üéµ –ú—É–∑—ã–∫–∞'
        if ext in doc_exts: return 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç'
        if ext in video_exts: return 'üé• –í–∏–¥–µ–æ'
        return f'üìÅ {ext.upper()}'

    def toggle_filter(self, ftype):
        if ftype in self.active_filters:
            self.active_filters.remove(ftype)
        else:
            self.active_filters.add(ftype)
        self.apply_active_filters()

    def apply_active_filters(self):
        if not self.active_filters:
            self.filtered_data = self.duplicates_data.copy()
        else:
            self.filtered_data = []
            for data in self.duplicates_data:
                file_ext = os.path.splitext(data['path'])[1].lower()
                if any(file_ext == ext for ext in self.active_filters) or \
                   ('photo' in self.active_filters and 'üñºÔ∏è –§–æ—Ç–æ' in data['type']) or \
                   ('music' in self.active_filters and 'üéµ –ú—É–∑—ã–∫–∞' in data['type']) or \
                   ('docs' in self.active_filters and 'üìÑ –î–æ–∫—É–º–µ–Ω—Ç' in data['type']) or \
                   ('video' in self.active_filters and 'üé• –í–∏–¥–µ–æ' in data['type']):
                    self.filtered_data.append(data)
        self.refresh_table()
        if self.status: self.status.config(text=f"üéØ –§–ò–õ–¨–¢–†–´: {', '.join(self.active_filters)} | {len(self.filtered_data)} —Ñ–∞–π–ª–æ–≤")

    def show_dynamic_filter(self):
        if not self.dynamic_file_types:
            messagebox.showinfo("‚ÑπÔ∏è", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π!")
            return
        if self.theme == 0:
            bg_color = '#f5ede1'
            text_color = '#1a1a2e'
        elif self.theme == 1:
            bg_color = '#1C2526'
            text_color = '#5D7A8C'
        else:
            bg_color = '#ffe6f0'
            text_color = '#1a1a2e'
        selected_ext = tk.Toplevel(self.root)
        selected_ext.title("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è")
        selected_ext.geometry("200x300")
        selected_ext.transient(self.root)
        selected_ext.grab_set()
        options = sorted(list(self.dynamic_file_types))
        var_dict = {ext: tk.BooleanVar() for ext in options}
        scrollbar = ttk.Scrollbar(selected_ext, orient="vertical", style='Vertical.TScrollbar')
        canvas = tk.Canvas(selected_ext, bg=bg_color, bd=0, highlightthickness=0, yscrollcommand=scrollbar.set)
        frame = tk.Frame(canvas, bg=bg_color, bd=0, highlightthickness=0)
        scrollbar.config(command=canvas.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        canvas.create_window((0, 0), window=frame, anchor="nw")
        def on_frame_configure(event):
            canvas.configure(scrollregion=canvas.bbox("all"))
        frame.bind("<Configure>", on_frame_configure)
        for ext in options:
            check = tk.Checkbutton(frame, text=f".{ext[1:]}", variable=var_dict[ext], bg=bg_color, fg=text_color, bd=0, highlightthickness=0)
            check.pack(anchor='w', pady=2)
        def apply_filter(event=None):
            selected_exts = [ext for ext, var in var_dict.items() if var.get()]
            if selected_exts:
                self.active_filters.update(selected_exts)
                self.apply_active_filters()
            selected_ext.destroy()
        def reset_filter():
            self.active_filters.clear()
            self.apply_active_filters()
            selected_ext.destroy()
        selected_ext.bind('<Return>', apply_filter)
        btn_frame = tk.Frame(selected_ext, bg=bg_color, bd=0, highlightthickness=0)
        btn_frame.pack(pady=5)
        tk.Button(btn_frame, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=apply_filter, relief='flat', bd=0, highlightthickness=0, bg=bg_color, fg=text_color).pack(side=tk.LEFT, padx=5)
        tk.Button(btn_frame, text="–°–±—Ä–æ—Å–∏—Ç—å", command=reset_filter, relief='flat', bd=0, highlightthickness=0, bg=bg_color, fg=text_color).pack(side=tk.LEFT, padx=5)

    def filter_by_folder(self):
        folder = filedialog.askdirectory(title="–í—ã–±–µ—Ä–∏ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        if folder:
            self.filtered_data = []
            for data in self.duplicates_data:
                if folder.lower() in data['keep_path'].lower():
                    data['selected_to_keep'] = True
                    continue
                self.filtered_data.append(data)
            self.refresh_table()

    def clear_filters(self):
        self.active_filters.clear()
        self.filtered_data = self.duplicates_data.copy()
        self.refresh_table()
        if self.status: self.status.config(text="üõ°Ô∏è –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã")

    def refresh_table(self):
        if self.tree:
            for item in self.tree.get_children():
                self.tree.delete(item)
            for i, data in enumerate(self.filtered_data):
                keep_mark = "‚úÖ" if data['selected_to_keep'] else "‚ùå"
                count = str(data['keep_count']) if data['selected_to_keep'] and data['keep_count'] > 0 else ""
                self.tree.insert("", "end", values=(
                    data['id'], f"{keep_mark} {count}", data['delete'], data['size'],
                    os.path.dirname(data['path']), data['type'], data['hash'], "üìÇ"
                ), iid=i)

    def toggle_keep(self, event):
        if not self.scan_in_progress:
            col = self.tree.identify_column(event.x)
            if col == "#2":
                row = self.tree.identify_row(event.y)
                if row:
                    index = int(self.tree.index(row))
                    current_data = self.filtered_data[index]
                    if not current_data['selected_to_keep']:
                        self.keep_count += 1
                        current_data['keep_count'] = self.keep_count
                    else:
                        self.keep_count -= 1
                        current_data['keep_count'] = 0
                        for i, data in enumerate(self.filtered_data):
                            if data['selected_to_keep'] and data['keep_count'] > current_data['keep_count']:
                                data['keep_count'] -= 1
                    current_data['selected_to_keep'] = not current_data['selected_to_keep']
                    keep_mark = "‚úÖ" if current_data['selected_to_keep'] else "‚ùå"
                    count = str(current_data['keep_count']) if current_data['selected_to_keep'] and current_data['keep_count'] > 0 else ""
                    self.tree.set(row, "#2", f"{keep_mark} {count}")
                    self.root.update()

    def reset_keep(self):
        if not self.scan_in_progress and any(data['selected_to_keep'] for data in self.filtered_data):
            self.keep_count = 0
            for data in self.filtered_data:
                data['selected_to_keep'] = False
                data['keep_count'] = 0
            self.refresh_table()
            if self.status: self.status.config(text="üõ°Ô∏è –û—Ç–º–µ—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±—Ä–æ—à–µ–Ω—ã")

    def sort_by_column(self, col):
        if self.sort_column == col:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_reverse = False
            self.sort_column = col
        reverse = -1 if self.sort_reverse else 1
        if col == '–†–∞–∑–º–µ—Ä':
            self.filtered_data.sort(key=lambda x: float(x['size'].split()[0]), reverse=(reverse == -1))
        elif col == '–ü—É—Ç—å':
            self.filtered_data.sort(key=lambda x: x['path'], reverse=(reverse == -1))
        elif col == '–¢–∏–ø':
            self.filtered_data.sort(key=lambda x: x['type'], reverse=(reverse == -1))
        elif col == '–•—ç—à':
            self.filtered_data.sort(key=lambda x: x['hash'], reverse=(reverse == -1))
        elif col == '‚Ññ':
            self.filtered_data.sort(key=lambda x: x['id'], reverse=(reverse == -1))
        elif col == '–û—Å—Ç–∞–≤–∏—Ç—å ‚úì':
            self.filtered_data.sort(
                key=lambda x: (x['selected_to_keep'], x['keep_count'] if x['selected_to_keep'] else float('inf'), x['path']),
                reverse=(reverse == -1)
            )
        self.refresh_table()

    def open_file(self, event):
        if self.tree and self.status:
            item = self.tree.identify_row(event.y)
            if item and self.tree.identify_column(event.x) == '#8':
                index = int(self.tree.index(item))
                filepath = self.filtered_data[index]['path']
                if os.path.exists(filepath):
                    try:
                        subprocess.Popen(['start', '', filepath], shell=True)
                        self.status.config(text="üìÇ –§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!")
                        logging.info(f"–û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª: {filepath}")
                    except Exception as e:
                        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {e}")
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {e}")

    def preview_deletion(self):
        if self.filtered_data and self.status:
            total = len(self.filtered_data)
            space = sum(float(d['size'].split()[0]) for d in self.filtered_data if not d['selected_to_keep'])
            preview = f"üîÆ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê\n\nüõ°Ô∏è –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ê!\nüìã –ö –£–î–ê–õ–ï–ù–ò–Æ: {sum(1 for d in self.filtered_data if not d['selected_to_keep'])} —Ñ–∞–π–ª–æ–≤\nüíæ –û—Å–≤–æ–±–æ–¥–∏—Ç: {round(space)} KB\n\n–ü–ï–†–í–´–ï 5:\n"
            for i, data in enumerate([d for d in self.filtered_data if not d['selected_to_keep']][:5], 1):
                preview += f"{i}. {data['delete']} ({data['size']})\n"
            messagebox.showinfo("üëÅÔ∏è –ü–†–û–í–ï–†–ö–ê", preview)

    def show_detailed_stats(self):
        if self.filtered_data:
            total = len(self.filtered_data)
            messagebox.showinfo("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê", f"–§–∏–ª—å—Ç—Ä: {total} —Ñ–∞–π–ª–æ–≤")

    def final_delete(self):
        if self.filtered_data:
            total = sum(1 for d in self.filtered_data if not d['selected_to_keep'])
            if total == 0:
                messagebox.showinfo("‚ÑπÔ∏è", "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è!")
                return
            if messagebox.askyesno("1/3", f"–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É {total} —Ñ–∞–π–ª–æ–≤?"):
                if messagebox.askyesno("2/3", "–í—Ç–æ—Ä–æ–π —Ä–∞–∑ - –£–í–ï–†–ï–ù?"):
                    if messagebox.askyesno("3/3", "–¢–†–ï–¢–ò–ô –†–ê–ó - –ù–ê–í–°–ï–ì–î–ê!"):
                        self.execute_deletion(total)

    def execute_deletion(self, total):
        deleted = 0
        errors = []
        for data in self.filtered_data:
            if not data['selected_to_keep']:
                filepath = data['path']
                path_length = len(filepath)
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {filepath}, –¥–ª–∏–Ω–∞ –ø—É—Ç–∏: {path_length}")
                try:
                    if os.path.exists(filepath):
                        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ \\?\
                        normalized_path = os.path.normpath(filepath)
                        if path_length > 260:
                            short_path = self._get_short_path(normalized_path)
                            if short_path:
                                normalized_path = short_path
                                logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –ø—É—Ç—å: {short_path}")
                        send2trash(normalized_path)
                        deleted += 1
                        logging.info(f"–ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: {normalized_path}")
                    else:
                        errors.append(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
                except Exception as e:
                    errors.append(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {filepath}: {str(e)}")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filepath}: {str(e)}")
        if deleted > 0:
            messagebox.showinfo("‚úÖ", f"–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {deleted} —Ñ–∞–π–ª–æ–≤")
        if errors:
            messagebox.showerror("‚ö†Ô∏è –û—à–∏–±–∫–∏", "\n".join(errors))

    def _get_short_path(self, long_path):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø—É—Ç–µ–π –Ω–∞ Windows."""
        try:
            import win32api
            return win32api.GetShortPathName(long_path)
        except Exception:
            return None

    def start_cat_animation(self, event):
        if self.theme == 2 and not self.cat_animation:
            self.cat_animation = self.root.after(1000, self.animate_cat)

    def animate_cat(self):
        if self.theme == 2:
            colors = ['#FF4500', '#FFD700', '#00CED1', '#FF69B4']
            self.cat_color = random.choice(colors)
            self.cat_label.config(fg=self.cat_color, text="üêæüê±" if random.random() > 0.5 else "üê±üêæ")
            self.cat_animation = self.root.after(1000, self.animate_cat)

    def stop_cat_animation(self):
        if self.cat_animation:
            self.root.after_cancel(self.cat_animation)
            self.cat_animation = None
            self.cat_label.config(text="üê±üêæ")

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = DuplicateFinder()
    app.run()